import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.font_manager import FontProperties
from scipy.stats import ttest_rel
from statsmodels.stats.multitest import multipletests

# Define a function to summarize the data with the corrected metrics
def summarize_data(df, time_adjustment):
    summary = df.groupby('level').agg(
        generator=('generator', 'first'),
        completion_rate=('completionPercentage', lambda x: 1 if (x == 1.0).any() else 0),
        solve_consistency=('completionPercentage', 'mean'),
        average_jumps=('numJumps', 'mean'),
        average_kills=('totalKills', 'mean'),
        average_time=('remainingTime', lambda x: (time_adjustment - (x.mean() / 1000)))
    ).reset_index()
    return summary

# Define a function to summarize data by generator
def summarize_data_by_generator(df):
    summary = df.groupby('generator').agg(
        completion_rate=('completion_rate', 'mean'),
        solve_consistency=('solve_consistency', 'mean'),
        average_jumps=('average_jumps', 'mean'),
        average_kills=('average_kills', 'mean'),
        average_time=('average_time', 'mean'),
    ).reset_index()
    return summary

# Replace the level number with the level name
level_dict = {
    "lvl-1.txt": "lvl_1-1",
    "lvl-2.txt": "lvl_1-2",
    "lvl-3.txt": "lvl_1-3",
    "lvl-4.txt": "lvl_2-1",
    "lvl-5.txt": "lvl_3-1",
    "lvl-6.txt": "lvl_3-3",
    "lvl-7.txt": "lvl_4-1",
    "lvl-8.txt": "lvl_4-2",
    "lvl-9.txt": "lvl_5-1",
    "lvl-10.txt": "lvl_5-3",
    "lvl-11.txt": "lvl_6-1",
    "lvl-12.txt": "lvl_6-2",
    "lvl-13.txt": "lvl_6-3",
    "lvl-14.txt": "lvl_7-1",
    "lvl-15.txt": "lvl_8-1"
}

# Load and process original levels data
original_levels = pd.read_csv('original_levels.csv')
original_levels['level'] = original_levels['level'].map(level_dict)
original_levels['generator'] = original_levels['level']
original_summary = summarize_data(original_levels, 30)
original_summary = summarize_data_by_generator(original_summary)

# Drop the lvl_8-1 level as it is not generated by lve
original_summary = original_summary[original_summary['generator'] != 'lvl_8-1']

# Load and process TOAD-GAN generated levels data
toadgan_results = pd.read_csv('toadgan_results.csv')
toadgan_summary = summarize_data(toadgan_results, 20)
toadgan_summary = summarize_data_by_generator(toadgan_summary)
toadgan_summary = toadgan_summary[toadgan_summary['generator'] != 'lvl_8-1']

# Load and process TOAD-GAN fitness-sampled levels data
toadgan_fitness_results = pd.read_csv('toadgan_fitness_results.csv')
toadgan_fitness_summary = summarize_data(toadgan_fitness_results, 20)
toadgan_fitness_summary = summarize_data_by_generator(toadgan_fitness_summary)
toadgan_fitness_summary = toadgan_fitness_summary[toadgan_fitness_summary['generator'] != 'lvl_8-1']

# Load and process LVE generated levels data
lve_results = pd.read_csv('lve_toadgan_results.csv')
lve_summary = summarize_data(lve_results, 20)
lve_summary = summarize_data_by_generator(lve_summary)

# Merge all summaries to ensure alignment
merged_summary = pd.merge(original_summary, toadgan_summary, on='generator', suffixes=('_original', '_toadgan'))
merged_summary = pd.merge(merged_summary, toadgan_fitness_summary, on='generator')
merged_summary = pd.merge(merged_summary, lve_summary, on='generator', suffixes=('_toadgan_fitness', '_lve'))

# Prepare the data for grouped bar charts
labels = merged_summary['generator']
metrics = ['completion_rate', 'solve_consistency', 'average_jumps', 'average_kills', 'average_time']

all_results = []

for metric in metrics:
    original = merged_summary[f'{metric}_original']
    toadgan = merged_summary[f'{metric}_toadgan']
    toadgan_fitness = merged_summary[f'{metric}_toadgan_fitness']
    lve = merged_summary[f'{metric}_lve']

    x = np.arange(len(labels))  # the label locations
    width = 0.2  # the width of the bars

    fig, ax = plt.subplots(figsize=(12, 6))
    rects1 = ax.bar(x - width*1.5, original, width, label='Original')
    rects2 = ax.bar(x - width/2, toadgan, width, label='TOAD-GAN')
    rects3 = ax.bar(x + width/2, toadgan_fitness, width, label='TOAD-GAN Fitness')
    rects4 = ax.bar(x + width*1.5, lve, width, label='LVE')

    # Add some text for labels, title and custom x-axis tick labels, etc.
    ax.set_xlabel('Generator')
    ax.set_ylabel(metric.replace('_', ' ').title())
    ax.set_title(f'{metric.replace("_", " ").title()} Comparison')
    ax.set_xticks(x)
    ax.set_xticklabels(labels, rotation=45, ha='right')

    ax.legend()

    fig.tight_layout()

    plt.savefig(f'plots/grouped_{metric}_comparison.png')
    plt.close()

    # Perform paired t-tests
    comparisons = [
        ('Original vs TOAD-GAN', original, toadgan),
        ('Original vs TOAD-GAN Fitness', original, toadgan_fitness),
        ('Original vs LVE', original, lve),
        ('TOAD-GAN vs TOAD-GAN Fitness', toadgan, toadgan_fitness),
        ('TOAD-GAN vs LVE', toadgan, lve),
        ('TOAD-GAN Fitness vs LVE', toadgan_fitness, lve)
    ]

    results = []

    p_values = []
    for label, group1, group2 in comparisons:
        t_stat, p_value = ttest_rel(group1, group2)
        p_values.append(p_value)
        mean_diff = np.mean(group1) - np.mean(group2)
        results.append([label, round(t_stat, 4), round(p_value, 4), round(mean_diff, 4)])

    # Apply Bonferroni correction
    corrected_p_values = multipletests(p_values, alpha=0.05, method='bonferroni')[1]
    for result, corrected_p_value in zip(results, corrected_p_values):
        result.append(round(corrected_p_value, 4))

    # Add the metric name to each result
    for result in results:
        result.insert(0, metric)

    # Append the results to the all_results list
    all_results.extend(results)

# Create a DataFrame to store all results
all_results_df = pd.DataFrame(all_results, columns=['Metric', 'Comparison', 't-statistic', 'p-value', 'Mean Difference', 'Corrected p-value'])

# Plot the t-test results
fig, ax = plt.subplots(figsize=(14, 8))
ax.axis('tight')
ax.axis('off')

# Prepare table data and column widths
table_data = [all_results_df.columns.to_list()] + all_results_df.values.tolist()
col_widths = [0.15, 0.25, 0.15, 0.15, 0.15, 0.15]
table = ax.table(cellText=table_data, cellLoc='center', loc='center', colWidths=col_widths)

# Adjust font size and scale
table.auto_set_font_size(False)
table.set_fontsize(10)
table.scale(1.2, 1.2)

plt.title('T-Test Results with Bonferroni Correction')
plt.savefig('plots/ttest_results.png')
plt.show()

# Print the DataFrame to verify the results
print(all_results_df)
